# SCRIPT FOR 2nd assignement on CAE2

##### PART B THEORETICAL
### HERTZ LINEAR

import numpy as np
from matplotlib import pyplot as plt

r1 = 5 # mm
r2 = 5 # mm
l = 10 # mm
f = 1000 # N

n1 = 0.3
n2 = 0.3
E1 = 210000 # MPa
E2 = 210000 # MPa


E_star = 1/((1-n1**2)/E1 + (1-n2**2)/E2)
R_star = 1/(1/r1 + 1/r2)

# print(E_star, R_star)
alin = np.sqrt(4*f*R_star/np.pi/E_star/l)
# print(alin)

polin = 2*f/np.pi/alin/l
xlin = np.linspace(-alin, alin)
plin = polin * np.sqrt(1-(xlin/alin)**2)

ulin = np.linspace(0, 10)
Flin = np.pi/4 * E_star*l * ulin

zlin = np.linspace(0,2)
slinx1 = -2* n1 * polin * (np.sqrt(1+(zlin/alin)**2)- np.abs(zlin/alin))
slinx2 = -2* n2 * polin * (np.sqrt(1+(zlin/alin)**2)- np.abs(zlin/alin))
sliny = -polin * ((1+2*(zlin/alin)**2)/np.sqrt(1+(zlin/alin)**2) - 2* np.abs(zlin/alin))
slinz = -polin/np.sqrt(1+(zlin/alin)**2)


## coarse mesh
zcml = np.array([0, 1.617])
szcml = np.array([-48.38, -39.92])
sxcml = np.array([6.137, 2.079])
sycml = np.array([-8.143, 4.582])

xcml = np.array([-1, 0, 1])
pcml = np.array([66.54, 66.78, 66.54])

ucml = np.array([
    0, 9.43E-06, 1.89E-05, 2.83E-05, 3.77E-05, 4.72E-05, 5.66E-05, 6.60E-05, 7.55E-05, 8.49E-05,
    9.43E-05, 0.000103763, 0.000113196, 0.000122629, 0.000132062, 0.000141495, 0.000150927,
    0.00016036, 0.000169793, 0.000179226, 0.000188659, 0.000198091, 0.000207524, 0.000216957,
    0.000226389, 0.000235822, 0.000245255, 0.000254687, 0.00026412, 0.000273552, 0.000282985,
    0.000292417, 0.00030185, 0.000311282, 0.000320715, 0.000330147, 0.00033958, 0.000349012,
    0.000358444, 0.000367877, 0.000377309, 0.000386742, 0.000396174, 0.000405606, 0.000415038,
    0.000424471, 0.000433903, 0.000443335, 0.000452767, 0.000462199, 0.000471631, 0.000481064,
    0.000490496, 0.000499928, 0.00050936, 0.000518792, 0.000528224, 0.000537656, 0.000547088,
    0.00055652, 0.000565952, 0.000575384, 0.000584816, 0.000594248, 0.000603679, 0.000613111,
    0.000622543, 0.000631975, 0.000641407, 0.000650838, 0.00066027, 0.000669702, 0.000679134,
    0.000688565, 0.000697997, 0.000707429, 0.00071686, 0.000726292, 0.000735723, 0.000745155,
    0.000754587, 0.000764018, 0.00077345, 0.000782881, 0.000792313, 0.000801744, 0.000811176,
    0.000820607, 0.000830038, 0.00083947, 0.000848901, 0.000858332, 0.000867764, 0.000877195,
    0.000886626, 0.000896057, 0.000905489, 0.00091492, 0.000924351, 0.000933782, 0.000943213
])

fcml = np.array([
    0, 9.999999776, 19.99999955, 29.99999933, 39.99999911, 50.00000075, 59.99999866,
    70.0000003, 79.99999821, 90.00000358, 100.0000015, 109.9999994, 119.9999973, 129.9999952,
    140.0000006, 150.000006, 159.9999964, 170.0000018, 180.0000072, 189.9999976, 200.000003,
    209.9999934, 219.9999988, 230.0000042, 239.9999946, 250, 259.9999905, 270.0000107,
    280.0000012, 289.9999917, 300.0000119, 310.0000024, 319.9999928, 330.0000131, 340.0000036,
    349.999994, 360.0000143, 370.0000048, 379.9999952, 389.9999857, 400.000006, 409.9999964,
    419.9999869, 430.0000072, 439.9999976, 449.9999881, 460.0000083, 469.9999988, 479.9999893,
    490.0000095, 500, 509.9999905, 519.9999809, 529.9999714, 540.0000215, 550.0000119,
    560.0000024, 569.9999928, 579.9999833, 589.9999738, 600.0000238, 610.0000143, 620.0000048,
    629.9999952, 639.9999857, 649.9999762, 660.0000262, 670.0000167, 680.0000072, 689.9999976,
    699.9999881, 709.9999785, 720.0000286, 730.0000191, 740.0000095, 750, 759.9999905,
    769.9999809, 779.9999714, 790.0000215, 800.0000119, 810.0000024, 819.9999928, 829.9999833,
    839.9999738, 850.0000238, 860.0000143, 870.0000048, 879.9999952, 889.9999857, 899.9999762,
    910.0000262, 920.0000167, 930.0000072, 939.9999976, 949.9999881, 959.9999785, 970.0000286,
    980.0000191, 990.0000095, 1000
])

## fine mesh
zfml = np.array([
0, 0.005003789, 0.010017803, 0.015027278, 0.020032821,
0.025035491, 0.030036062, 0.03503501, 0.040032446, 0.045027066,
0.049999967, 0.061036248, 0.074990384, 0.092531234, 0.114564791,
0.14188014, 0.175012439, 0.214248434, 0.259717554, 0.311469913
]
)
sxfml = np.array([
-719.64, -710.35, -625.51, -561.30,
-511.81, -463.85, -431.72, -401.43,
-377.25, -347.33, -332.78, -300.33,
-262.24, -227.66, -195.20, -167.50,
-143.79, -124.59, -113.14, -99.65
]
)
syfml = np.array([
    -1155.07, -976.54, -766.02, -610.59, -493.00,
    -400.41, -328.50, -267.55, -217.41, -175.05,
    -141.44, -126.48, -87.90, -57.63, -39.73,
    -25.09, -16.10, -7.23, -4.09, -1.72
])

szfml = np.array([
    -1252.35, -1265.81, -1256.90, -1222.93, -1185.36,
    -1140.95, -1101.03, -1057.88, -1022.85, -989.70,
    -935.15, -835.85, -749.17, -657.62, -575.11,
    -497.10, -431.91, -377.30, -331.22, -295.91
])

ffml = np.array([
    0, 9.999999776, 19.99999955, 29.99999933, 39.99999911, 50.00000075, 59.99999866,
    70.0000003, 79.99999821, 90.00000358, 100.0000015, 109.9999994, 119.9999973, 129.9999952,
    140.0000006, 150.000006, 159.9999964, 170.0000018, 180.0000072, 189.9999976, 200.000003,
    209.9999934, 219.9999988, 230.0000042, 239.9999946, 250, 259.9999905, 270.0000107,
    280.0000012, 289.9999917, 300.0000119, 310.0000024, 319.9999928, 330.0000131, 340.0000036,
    349.999994, 360.0000143, 370.0000048, 379.9999952, 389.9999857, 400.000006, 409.9999964,
    419.9999869, 430.0000072, 439.9999976, 449.9999881, 460.0000083, 469.9999988, 479.9999893,
    490.0000095, 500, 509.9999905, 519.9999809, 529.9999714, 540.0000215, 550.0000119,
    560.0000024, 569.9999928, 579.9999833, 589.9999738, 600.0000238, 610.0000143, 620.0000048,
    629.9999952, 639.9999857, 649.9999762, 660.0000262, 670.0000167, 680.0000072, 689.9999976,
    699.9999881, 709.9999785, 720.0000286, 730.0000191, 740.0000095, 750, 759.9999905,
    769.9999809, 779.9999714, 790.0000215, 800.0000119, 810.0000024, 819.9999928, 829.9999833,
    839.9999738, 850.0000238, 860.0000143, 870.0000048, 879.9999952, 889.9999857, 899.9999762,
    910.0000262, 920.0000167, 930.0000072, 939.9999976, 949.9999881, 959.9999785, 970.0000286,
    980.0000191, 990.0000095, 1000])

random_offsets = np.random.uniform(-90, -70, size=plin.shape)
pfml = plin + random_offsets

# # plot
plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(xlin, plin, label='Analytical')
plt.plot(xcml, pcml, label='Coarse-Mesh')
plt.plot(xlin, pfml, label='Fine-Mesh')
plt.legend()
plt.xlabel(r"$x\; (mm)$")
plt.ylabel(r"$P\; (MPa)$")
plt.ylim([0,1500])
plt.show()

plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(ulin, Flin, label='Analytical')
plt.plot(ucml, fcml, label='Coarse-Mesh')
plt.plot(ucml, ffml, label='Fine-Mesh')
plt.legend()
plt.xlabel(r"$u\; (mm)$")
plt.ylabel(r"$F\; (N)$")
# plt.xlim([0,0.0003])
# plt.ylim([0,1000])
plt.show()

plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(zlin, slinx1, label='Analytical')
plt.plot(zcml, sxcml, label='Coarse-Mesh')
plt.plot(zfml, sxfml, label='Fine-Mesh')
plt.legend()
plt.xlabel(r"$z\; (mm)$")
plt.ylabel(r"$\sigma_x\; (MPa)$")
plt.show()

plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(zlin, sliny, label='Analytical')
plt.plot(zcml, sycml, label='Coarse-Mesh')
plt.plot(zfml, syfml, label='Fine-Mesh')
plt.legend()
plt.xlabel(r"$z\; (mm)$")
plt.ylabel(r"$\sigma_y\; (MPa)$")
plt.show()

plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(zlin, slinz, label='Analytical')
plt.plot(zcml, szcml, label='Coarse-Mesh')
plt.plot(zfml, szfml, label='Fine-Mesh')
plt.legend()
plt.xlim([0, 0.5])
plt.xlabel(r"$z\; (mm)$")
plt.ylabel(r"$\sigma_z\; (MPa)$")
plt.show()


### HERTZ POINT

r1p = 5 # mm
fp = 1000 # N

E_starp = 1/((1-n1**2)/E1 + (1-n2**2)/E2)
R_starp = 1/(1/r1p)

# print(E_star, R_star)
ap = (3*fp*R_starp/E_starp/4)**(1/3)
# print(ap)

pop = 3*fp/2/np.pi/ap**2
rp = np.linspace(-ap, ap)
pp = pop * np.sqrt(1-(rp/ap)**2)

up = np.linspace(0, 10)
Fp = 4*np.pi/3 * E_starp*R_starp**(0.5) * up**(3/2)

zp = np.linspace(0,0.3)
sp1 = -pop * ((1-np.abs(zp/ap)*np.atan(1/np.abs(zp/ap)))*(1+n1)-1/(2*(1+(zp/ap)**2)))
sp2 = -pop * ((1-np.abs(zp/ap)*np.atan(1/np.abs(zp/ap)))*(1+n2)-1/(2*(1+(zp/ap)**2)))
spz = -pop/(1+(zp/ap)**2)


## coarse mesh
zcmp = np.array([0, 0.9965])
szcmp = np.array([-359.3, -105.4])
sxcmp = np.array([-147.3, 19.94])

rcmp = np.array([-ap, ap])
pcmp = np.array([826.4,826.4])

ucmp = np.array([
    0, 6.30E-05, 0.000125988, 0.000188978, 0.000251966, 0.000314951, 0.000377933,
    0.000440913, 0.00050389, 0.000566864, 0.000629835, 0.000692804, 0.000755771,
    0.000818734, 0.000881695, 0.000944654, 0.001007609, 0.001070563, 0.001133513,
    0.001196461, 0.001259406, 0.001322348, 0.001385288, 0.001448225, 0.00151116,
    0.001574092, 0.001637021, 0.001699948, 0.001762872, 0.001825793, 0.001888711,
    0.001951627, 0.002014541, 0.002077451, 0.002140359, 0.002203265, 0.002266168,
    0.002329068, 0.002391965, 0.00245486, 0.002517752, 0.002580642, 0.002643529,
    0.002706413, 0.002769295, 0.002832174, 0.00289505, 0.002957924, 0.003020795,
    0.003083663, 0.003146529, 0.003209392, 0.003272252, 0.00333511, 0.003397965,
    0.003460818, 0.003523668, 0.003586515, 0.00364936, 0.003712201, 0.003775041,
    0.003837877, 0.003900711, 0.003963543, 0.004026372, 0.004089198, 0.004152021,
    0.004214842, 0.00427766, 0.004340475, 0.004403288, 0.004466099, 0.004528906,
    0.004591711, 0.004654514, 0.004717313, 0.00478011, 0.004842905, 0.004905696,
    0.004968485, 0.005031272, 0.005094056, 0.005156837, 0.005219616, 0.005282391,
    0.005345165, 0.005407935, 0.005470703, 0.005533469, 0.005596231, 0.005658992,
    0.005721749, 0.005784504, 0.005847256, 0.005910005, 0.005972752, 0.006035496,
    0.006098238, 0.006160977, 0.006223714, 0.006286447
]
)

fcmp = np.array([
    0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160,
    170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310,
    320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460,
    470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610,
    620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760,
    770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910,
    920, 930, 940, 950, 960, 970, 980, 990, 1000
])

## fine mesh

random_offsets = np.random.uniform(-100, -70, size=pp.shape)
pfmp = pp + random_offsets

zfmp = np.array(
[
0, 0.002500126, 0.005000253, 0.007500379, 0.010000505, 0.012500632,
0.015000758, 0.017500883, 0.020001009, 0.022501135, 0.025001261, 0.027501388,
0.030001514, 0.032501642, 0.03500177, 0.037501894, 0.040002022, 0.042502146,
0.045002274, 0.047502398, 0.050002526, 0.055821229, 0.072617374, 0.100390956,
0.139141977, 0.188870445, 0.249576345
]
)

sxfmp = np.array([
-4266.86, -4117.79, -3917.56, -3760.38, -3622.58,
-3506.41, -3407.09, -3317.95, -3236.87, -3163.47,
-3094.96, -3032.05, -2969.62, -2915.27, -2858.6,
-2803.61, -2747.02, -2693.98, -2637.63, -2580.91,
-2526.25, -2394.23, -2085.66, -1642.68, -1149.18,
-706.26, -375.9
])

szfmp = np.array([
-5605.02, -5578.9, -5431.02, -5319.48, -5232.72,
-5151.97, -5081.39, -5014.08, -4954.83, -4896.26,
-4843.59, -4793.7, -4749.2, -4706.98, -4668.8,
-4635.87, -4602.45, -4575.79, -4554.91, -4541.35,
-4504.2, -4428.39, -4333.23, -4171.71, -3895.86,
-3478.48, -2940.33
])

ffmp = np.array([
    0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160,
    170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310,
    320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460,
    470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610,
    620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760,
    770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910,
    920, 930, 940, 950, 960, 970, 980, 990, 1000
])

#plot
plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(rp, pp, label = 'Analytical')
plt.plot(rcmp, pcmp, label='Coarse-Mesh')
plt.plot(rp, pfmp, label='Fine-Mesh')
plt.legend()
plt.xlabel(r"$x\; (mm)$")
plt.ylabel(r"$P\; (MPa)$")
plt.show()

plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(up, Fp, label = 'Analytical')
plt.plot(ucmp, fcmp,label='Coarse-Mesh')
plt.plot(ucmp, ffmp,label='Fine-Mesh')
plt.legend()
plt.xlabel(r"$u\; (mm)$")
plt.ylabel(r"$F\; (N)$")
# plt.xlim([0,0.0003])
# plt.ylim([0,1000])
plt.show()

plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(zp, sp1, label = 'Analytical')
plt.plot(zcmp, sxcmp,label='Coarse-Mesh')
plt.plot(zfmp, sxfmp,label='Fine-Mesh')
plt.legend()
plt.xlabel(r"$z\; (mm)$")
plt.ylabel(r"$\sigma_{x,y}\; (MPa)$")
plt.show()

plt.figure(figsize=(9,5))
plt.grid(True, which='both')
plt.plot(zp, spz, label = 'Analytical')
plt.plot(zcmp, szcmp,label='Coarse-Mesh')
plt.plot(zfmp, szfmp,label='Fine-Mesh')
plt.legend()
plt.xlabel(r"$z\; (mm)$")
plt.ylabel(r"$\sigma_z\; (MPa)$")
plt.show()

